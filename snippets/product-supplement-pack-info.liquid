<section class="pack-info-section {{ product.handle }}">
  <div class="container">
    <div class="titles">
      <h2 class="title">{{ product.title }}</h2>
      <p class="subtitle">{{ product.description }}</p>
    </div>

    {% comment %} <div class="info-tabs">
      <div class="tab-cont">
        <button onclick="tab(event, 'highlights')">Product Highlights</button>
        <button onclick="tab(event, 'instructions')">Usage Instructions</button>
        <button onclick="tab(event, 'ingredients')">Ingredients</button>
        <button onclick="tab(event, 'facts')">Supplement Facts</button>
      </div>
      <div class="tab-content" id="highlights">

      </div>
      <div class="tab-content" id="instructions">
          <h2>Paris</h2>
          <p>Paris is the capital of France.</p>
      </div>
      <div class="tab-content" id="ingredients">
          <h2>Tokyo</h2>
          <p>Tokyo is the capital of Japan.</p>
      </div>
      <div class="tab-content" id="facts">
          <h2>Tokyo</h2>
          <p>Tokyo is the capital of Japan.</p>
      </div>
    </div> {% endcomment %}

    <div class="tabbed-content tabs-side">
      <nav class="tabs">
        <ul>
          <li><a href="#highlights" class="active">Product Highlights</a></li>
          <li><a href="#instructions">Usage Instructions</a></li>
          <li><a href="#ingredients">Ingredients</a></li>
          <li><a href="#facts">Supplement Facts</a></li>
        </ul>
      </nav>
      <section id="highlights" class="item active" data-title="Product Highlights">
        <div class="item-content">
          <div class="highlights">
            {% for highlight in product.metafields.custom.product-highlights.value %}
              <div class="highlight">
                <div class="highlight-icon"><i class="icofont-check"></i></div>
                <p><b>{{ highlight.title }}</b><br>{{ highlight.subtitle }}</p>
              </div>
            {% endfor %}
          </div>
        </div>
      </section>
    </div>
  </div>
</section>

<style>
  @import url('https://fonts.googleapis.com/css?family=Roboto:300,400,900');
   p.warning {
     text-align: center;
     line-height: 2;
  }
   p.warning a {
     background: #3bacff;
     color: #fff;
     padding: 0.2rem 0.5rem;
     border-radius: 3px;
     white-space: nowrap;
  }
   p.warning a.more {
     background: #45ba04;
  }
  /* SCSS variables and mixins */
  /* Some styles to make this demo look pretty (or at least decent) If you want to style everything yourself, you shouldn't need these */
   body {
     padding: 1em;
     background: #eee;
     color: #444;
     font-family: 'Roboto', sans-serif;
     font-weight: 100;
  }
   body a {
     text-decoration: none;
     color: #444;
  }
   body p {
     margin-top: 0;
  }
   body div {
     box-sizing: border-box;
  }
   h2 {
     margin: 2em auto 0;
     text-align: center;
  }
   .tabbed-content {
     background: #fff;
     box-shadow: 1px 1px 6px #ccc;
     max-width: 600px;
     padding: 1em;
     margin: 1em auto;
  }
   .tabs ul {
     margin: 0;
     padding: 0 0 1em 0;
     font-weight: bold;
  }
   .tabs ul li {
     background: #eee;
  }
   .tabs ul li a {
     padding: 0.5em 1em;
  }
   .tabs ul li a:hover, .tabs ul li a.active {
     background: #444;
     color: #eee;
  }
   .item {
     margin-bottom: 2px;
  }
   .item::before {
     cursor: pointer;
     font-weight: bold;
     background: #eee;
     padding: 0.5em;
     display: block;
  }
   .item.active::before {
     background: #444;
     color: #eee;
  }
   .item.active .item-content {
     padding: 1em;
     -webkit-transition: opacity 0.3s ease-in-out;
     -moz-transition: opacity 0.3s ease-in-out;
     -o-transition: opacity 0.3s ease-in-out;
     -ms-transition: opacity 0.3s ease-in-out;
     transition: opacity 0.3s ease-in-out;
  }
   @media all and (min-width: 800px) {
     .item.active .item-content {
       padding-top: 0;
    }
     .tabs-side .tabs li {
       margin-bottom: 2px;
    }
  }
  /* The project specific CSS starts here This is the minimum CSS that you will need in order for this to work */
   .tabbed-content .tabs {
     display: none;
  }
   .tabbed-content .item {
     min-height: 2em;
  }
   .tabbed-content .item::before {
     content: attr(data-title);
  }
   .tabbed-content .item .item-content {
     opacity: 0;
     visibility: hidden;
     height: 0;
  }
   .tabbed-content .item.active .item-content {
     opacity: 1;
     visibility: visible;
     height: auto;
  }
   @media all and (min-width: 800px) {
     .tabbed-content .tabs {
       display: block;
    }
     .tabbed-content .tabs li {
       display: inline-block;
    }
     .tabbed-content .tabs li a {
       display: block;
    }
     .tabbed-content .item {
       min-height: 0;
    }
     .tabbed-content .item::before {
       display: none;
    }
     .tabbed-content.tabs-side .tabs {
       width: 150px;
       float: left;
    }
     .tabbed-content.tabs-side .tabs li {
       display: block;
    }
     .tabbed-content.tabs-side .item {
       margin-left: 150px;
    }
  }
</style>

<style>
  .pack-info-section {
    background: var(--beige);
  }

  .info-tabs {
    width: 90%;
    overflow:hidden;
    height: 300px;
    margin-top: 20px;
    max-width: 800px;
  }

  .tab-cont {
    float: left;
    width: 30%;
    height: 100%;
  }

  .tab-cont button {
    width: 100%;
    font-size: 22px;
    height: 25%;
    color: #404733;
    background: unset;
    border-bottom: 1px solid black;
  }

  .tab-cont button:first-child {
    border-top: 1px solid black;
  }

  .tab-cont button:hover .arrow-icon {
    margin-right: 10px;
  }

  .tab-content {
    height: 100%;
    float: left;
    padding: 20px;
    width: 70%;
    animation: anime 1s;
  }

  .tab-content h2 {
    font-size: 24px;
    font-weight: 400;
    margin: 20px 0 10px 0;
  }

  .tab-content p {
    font-weight: 100;
    color: #666;
    margin-top: 20px
  }

  .tab-cont button.active .tab-cont button {
    background-color: #b4b4b4;
  }

  @keyframes anime {
    from {opacity: 0}
    to {opacity: 1}
  }

  .highlights .highlight {
    display: flex;
    align-items: center;
  }

  .highlight-icon {
    background: var(--light-green);
    color: white;
    border-radius: 50%;
    min-width: 30px;
    height: 30px;
    font-size: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 20px;
  }
</style>

<script>
  tabControl();

  /*
  We also apply the switch when a viewport change is detected on the fly
  (e.g. when you resize the browser window or flip your device from
  portrait mode to landscape). We set a timer with a small delay to run
  it only once when the resizing ends. It's not perfect, but it's better
  than have it running constantly during the action of resizing.
  */
  var resizeTimer;
  $(window).on('resize', function(e) {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(function() {
      tabControl();
    }, 250);
  });

  /*
  The function below is responsible for switching the tabs when clicked.
  It switches both the tabs and the accordion buttons even if
  only the one or the other can be visible on a screen. We prefer
  that in order to have a consistent selection in case the viewport
  changes (e.g. when you esize the browser window or flip your
  device from portrait mode to landscape).
  */
  function tabControl() {
    var tabs = $('.tabbed-content').find('.tabs');
    if(tabs.is(':visible')) {
      tabs.find('a').on('click', function(event) {
        event.preventDefault();
        var target = $(this).attr('href'),
            tabs = $(this).parents('.tabs'),
            buttons = tabs.find('a'),
            item = tabs.parents('.tabbed-content').find('.item');
        buttons.removeClass('active');
        item.removeClass('active');
        $(this).addClass('active');
        $(target).addClass('active');
      });
    } else {
      $('.item').on('click', function() {
        var container = $(this).parents('.tabbed-content'),
            currId = $(this).attr('id'),
            items = container.find('.item');
        container.find('.tabs a').removeClass('active');
        items.removeClass('active');
        $(this).addClass('active');
        container.find('.tabs a[href$="#'+ currId +'"]').addClass('active');
      });
    }
  }
</script>