<section class="pack-info-section {{ product.handle }}">
  <div class="container">
    <div class="titles">
      <h2 class="title">{{ product.title }}</h2>
      <p class="subtitle">{{ product.description }}</p>
    </div>

    <div class="tabbed-content tabs-side">
      <nav class="tabs">
        <ul>
          <li><a href="#highlights" class="active">Product Highlights</a></li>
          <li><a href="#instructions">Usage Instructions</a></li>
          <li><a href="#ingredients">Ingredients</a></li>
          <li><a href="#facts">Supplement Facts</a></li>
        </ul>
      </nav>

      <div class="content">
        <div id="highlights" class="item" data-title="Product Highlights">
          <div class="item-content">
            <div class="highlights">
              {% for highlight in product.metafields.custom.product-highlights.value %}
                <div class="highlight">
                  <div class="highlight-icon"><i class="icofont-check"></i></div>
                  <p><b>{{ highlight.title }}</b><br>{{ highlight.subtitle }}</p>
                </div>
              {% endfor %}
            </div>
          </div>
        </div>

        <div id="instructions" class="item" data-title="Usage Instructions">
          <div class="item-content">
            <div class="highlights">
              {% for highlight in product.metafields.custom.product-highlights.value %}
                <div class="highlight">
                  <div class="highlight-icon"><i class="icofont-check"></i></div>
                  <p><b>{{ highlight.title }}</b><br>{{ highlight.subtitle }}</p>
                </div>
              {% endfor %}
            </div>
          </div>
        </div>

        <div id="ingredients" class="item" data-title="Ingredients">
          <div class="item-content">
            <div class="highlights">
              {% for highlight in product.metafields.custom.product-highlights.value %}
                <div class="highlight">
                  <div class="highlight-icon"><i class="icofont-check"></i></div>
                  <p><b>{{ highlight.title }}</b><br>{{ highlight.subtitle }}</p>
                </div>
              {% endfor %}
            </div>
          </div>
        </div>

        <div id="facts" class="item active" data-title="Supplement Facts">
          <div class="item-content">
            <div class="highlights">
              {% for highlight in product.metafields.custom.product-highlights.value %}
                <div class="highlight">
                  <div class="highlight-icon"><i class="icofont-check"></i></div>
                  <p><b>{{ highlight.title }}</b><br>{{ highlight.subtitle }}</p>
                </div>
              {% endfor %}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  section.pack-info-section .titles {
    flex-direction: revert;
    justify-content: start;
    max-width: 100%;
  }

  .pack-info-section {
    background: var(--beige);
  }

  .highlights .highlight {
    display: flex;
    align-items: center;
  }

  .highlight-icon {
    background: var(--light-green);
    color: white;
    border-radius: 50%;
    min-width: 30px;
    height: 30px;
    font-size: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 20px;
  }

  .tabbed-content {
    max-width: 800px;
  }

  .tabs ul li {
    text-align: center;
    height: 70px;
    border-bottom: 1px solid;
  }

  .tabs ul li:first-child {
    border-top: 1px solid;
  }
  .tabs ul li a {
    height: 100%;
    align-items: center;
    display: flex;
    justify-content: center;
  }
  .tabs ul li a:hover, .tabs ul li a.active {
  }
  .item {
    margin-bottom: 2px;
  }
  .item::before {
    cursor: pointer;
    font-weight: bold;
    background: #eee;
    padding: 0.5em;
    display: block;
  }
   .item.active::before {
     background: #444;
     color: #eee;
  }
   .item.active .item-content {
     padding: 1em;
     transition: opacity 0.3s ease-in-out;
  }
   @media all and (min-width: 800px) {
     .item.active .item-content {
       padding-top: 0;
    }
     .tabs-side .tabs li {
       margin-bottom: 2px;
    }
  }

  /* The project specific CSS starts here This is the minimum CSS that you will need in order for this to work */
   .tabbed-content .tabs {
     display: none;
  }
   .tabbed-content .item {
     min-height: 2em;
  }
   .tabbed-content .item::before {
     content: attr(data-title);
  }
   .tabbed-content .item .item-content {
     opacity: 0;
     visibility: hidden;
     height: 0;
  }
   .tabbed-content .item.active .item-content {
     opacity: 1;
     visibility: visible;
     height: auto;
  }
   @media all and (min-width: 800px) {
     .tabbed-content .tabs {
       display: block;
    }
     .tabbed-content .tabs li {
       display: inline-block;
    }
     .tabbed-content .tabs li a {
       display: flex;
    }
     .tabbed-content .item {
       min-height: 0;
    }
     .tabbed-content .item::before {
       display: none;
    }
     .tabbed-content.tabs-side .tabs {
       width: 300px;
       float: left;
       margin-right: 100px;
    }
     .tabbed-content.tabs-side .tabs li {
       display: block;
    }
     .tabbed-content.tabs-side .item {
       margin-left: 150px;
    }
  }
</style>

<script>
  tabControl();

  /*
  We also apply the switch when a viewport change is detected on the fly
  (e.g. when you resize the browser window or flip your device from
  portrait mode to landscape). We set a timer with a small delay to run
  it only once when the resizing ends. It's not perfect, but it's better
  than have it running constantly during the action of resizing.
  */
  var resizeTimer;
  $(window).on('resize', function(e) {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(function() {
      tabControl();
    }, 250);
  });

  /*
  The function below is responsible for switching the tabs when clicked.
  It switches both the tabs and the accordion buttons even if
  only the one or the other can be visible on a screen. We prefer
  that in order to have a consistent selection in case the viewport
  changes (e.g. when you esize the browser window or flip your
  device from portrait mode to landscape).
  */
  function tabControl() {
    var tabs = $('.tabbed-content').find('.tabs');
    if(tabs.is(':visible')) {
      tabs.find('a').on('click', function(event) {
        event.preventDefault();
        var target = $(this).attr('href'),
            tabs = $(this).parents('.tabs'),
            buttons = tabs.find('a'),
            item = tabs.parents('.tabbed-content').find('.item');
        buttons.removeClass('active');
        item.removeClass('active');
        $(this).addClass('active');
        $(target).addClass('active');
      });
    } else {
      $('.item').on('click', function() {
        var container = $(this).parents('.tabbed-content'),
            currId = $(this).attr('id'),
            items = container.find('.item');
        container.find('.tabs a').removeClass('active');
        items.removeClass('active');
        $(this).addClass('active');
        container.find('.tabs a[href$="#'+ currId +'"]').addClass('active');
      });
    }
  }
</script>